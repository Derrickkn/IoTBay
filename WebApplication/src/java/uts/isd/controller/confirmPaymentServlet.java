/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uts.isd.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import uts.isd.model.dao.DBConnector;
import uts.isd.model.dao.PaymentDBManager;
import uts.isd.model.payment;
import uts.isd.controller.Validator;

/**
 *
 * @author bappa
 */
public class confirmPaymentServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        //retrieve parameters entered by user
        String method = request.getParameter("paymethod");
        String cardNo = request.getParameter("cardNo");
        String change = request.getParameter("change");
        //set session attributes as null
        //Order order= (Order) session.getAttribute("order);
        session.setAttribute("sucess", null);
        session.setAttribute("paymenterror", null);
        int orderID = Integer.parseInt(request.getParameter("orderID"));
        //get concurrent date generated by system
        LocalDate date = LocalDate.now();
        //create a new validator class
        Validator validator = new Validator();
        //validates wether fields are empty or does not match the regular expression
        if (method.equals("method") || validator.isFieldEmpty(cardNo)) {
            session.setAttribute("paymenterror", "Please fill in all required fields!");
            request.getRequestDispatcher("makepayment.jsp").include(request, response);
        } else if (!validator.validatecardNo(cardNo)) {
            session.setAttribute("paymenterror", "Please enter a valid card number. Must be 16 characters long");
            request.getRequestDispatcher("makepayment.jsp").include(request, response);
        } else {
            try {
                DBConnector connector;
                connector = new DBConnector();
                Connection conn = connector.openConnection();
                //creates paymentDBManager instance
                PaymentDBManager paymentDB = new PaymentDBManager(conn);
                //performs crud (Create) operations and stores 
                paymentDB.createPayment(orderID, method, cardNo, date);
                //check whether either options were clicked so system can perform crud operations
                if (change != null) {
                    if (change.equals("update")) {
                        //needs further refinement //int userID= order.getUserID()
                        paymentDB.updatePayment(1, method, cardNo);
                    } else if (change.equals("delete")) {
                        //needs further refinement //int userID= order.getUserID()
                        paymentDB.deletePayment(1);
                    }
                }
                session.setAttribute("orderid", orderID);
                session.setAttribute("success", "You have successfully made a purchase");
                request.getRequestDispatcher("paymentsuccess.jsp").include(request, response);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(confirmPaymentServlet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(confirmPaymentServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
