package uts.isd.model.dao;

import uts.isd.model.registeredUser;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import uts.isd.model.payment;

public class PaymentDBManager {

    //private fields for PaymentDBManager
    private Statement st;

    public PaymentDBManager(Connection conn) throws SQLException {
        st = conn.createStatement();
    }

    /*Create/Save Payment details Function
    *@param paymentMethod: the paymentMethod selected by User
    *@param cardNo: the card Number entered by User
    return: method return a message
    Method: updates the Patyment detail entered by User by executing query
     */
    public void updatePayment(int ID, String paymentMethod, String cardNo) throws SQLException {
        String query = "UPDATE registeredUser_Table SET PaymentMethod='" + paymentMethod + "',Payment='" + cardNo + "' WHERE UserID=" + ID;
        st.executeUpdate(query);
    }
    //Retrieves history of payment details 
    //@param cardNo: the cardNo saved by user
    //@param ID: the ID of user 
    //method returns an array list of the payment history made by user based on cardNo 
    public ArrayList<payment> fetchPayments(String cardNo, int ID) throws SQLException {
        //code for update-operation   
        String query = "SELECT * FROM ORDER_TABLE INNER JOIN PAYMENT_TABLE ON ORDER_TABLE.ORDERID= PAYMENT_TABLE.ORDERID WHERE ORDER_TABLE.USERID=" + ID + "AND PAYMENT_TABLE.CARDNO='" + cardNo + "'";
        ResultSet rs = st.executeQuery(query);
        ArrayList<payment> payment = new ArrayList<payment>();
        while (rs.next()) {
            int paymentID = rs.getInt(9);
            int orderID = rs.getInt(10);
            String method = rs.getString(11);
            String cardNumber = rs.getString(12);
            String date = rs.getString(13);
            payment.add(new payment(paymentID, orderID, method, cardNumber, date));
        }
        return payment;
    }
    //Method Retrieves payment history based on paymentID and specific date inputted by user
    //@param cardNo: the cardNo saved by user
    //@param ID: the ID of user
    //@param payID: the paymentID entered by user
    //@param specdate: specific date entered by user
    public ArrayList<payment> fetchspecificpayment(String cardNo, int ID, int payID, String specdate) throws SQLException {
        //code for update-operation   
        String query ="SELECT * FROM ORDER_TABLE INNER JOIN PAYMENT_TABLE ON ORDER_TABLE.ORDERID= PAYMENT_TABLE.ORDERID WHERE ORDER_TABLE.USERID=" + ID + " AND PAYMENT_TABLE.CARDNO='" + cardNo + "' AND PAYMENT_TABLE.PAYMENTID=" + payID + " AND PAYMENT_TABLE.DATEPAID='"+ specdate + "'";

        ResultSet rs = st.executeQuery(query);
        ArrayList<payment> payment = new ArrayList<payment>();
        while (rs.next()) {
            int paymentID = rs.getInt(9);
            int orderID = rs.getInt(10);
            String method = rs.getString(11);
            String cardNumber = rs.getString(12);
            String date = rs.getString(13);
            payment.add(new payment(paymentID, orderID, method, cardNumber, date));
        }
        return payment;
    }

    //delete payment details from user account
    //@param userID: the userID of the registeredUser
    public void deletePayment(int userID) throws SQLException {
        String query = "UPDATE registeredUser_Table SET PaymentMethod=" + null + ",Payment=" + null + " WHERE registeredUser_Table.userID=" + userID + "";
        st.executeUpdate(query);
    }
    //method creates a payment record for order
    //@param orderID: the orderID of order
    //@param method: the credit card type e.g. Visa, Mastercard, American express
    //@param cardNo: the card number of user
    //@param date. the local date generated by system
    public void createPayment(int orderID, String method, String cardNo, LocalDate date) throws SQLException {
        String query = "INSERT INTO Payment_Table (OrderID, PaymentMethod, CardNo, datePaid) VALUES (" + orderID + ", '" + method + "', '" + cardNo + "', '" + date + "')";
        st.executeUpdate(query);
    }
}
